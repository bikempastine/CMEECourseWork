Starting code feedback for Bikem, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 2.57 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week2, week3, .git, week1, Feedback

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~
*.tmp

.csv
.log

# Python
*.py[co]
__pycache__/

#Jupyter
.ipynb_checkpoints/

# R History files
.Rhistory
.Rapp.history

# R Session Data files
.RData

## Core latex/pdflatex auxiliary files:
*.aux
*.lof
*.log
*.lot
*.fls
*.out
*.toc
*.fmt
*.fot
*.cb
*.cb2
.*.lb

## Intermediate documents:
*.dvi
*.xdv
*-converted-to.*
# these rules might exclude image files for figures etc.
# *.ps
# *.eps
# *.pdf

## Generated if empty string is given at "Please type another file name for output:"
.pdf

## Bibliography auxiliary files (bibtex/biblatex/biber):
*.bbl
*.bcf
*.blg
*-blx.aux
*-blx.bib
*.run.xml

## Build tool auxiliary files:
*.fdb_latexmk
*.synctex
*.synctex(busy)
*.synctex.gz
*.synctex.gz(busy)
*.pdfsync

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# My CMEE Coursework Repository

### Description
This is Bikem Pastine's repository for the Coputational Methods in Ecology and Evolution Master's program. Each week the repository will be updated with the coursework for the prvious week for marking. 

### Instructions
To check the weeks assignement, clone the directory for that week and run the code within the 'code' folder. The code may prompt for inputs. Appropriate example inputs can be found in the 'data' folder. The outupts of the code can be found in the 'results' folder once the code is run. 

### Contents
| Submission  |      Learning Objectives      |  Link |
|----------|:-------------:|------:|
| Week 1 |  UNIX and LINUX, Bash scripting, LaTeX | [here](https://github.com/bikempastine/CMEECourseWork/tree/main/week1) |
| Week 2 |   Biological Computing in Python    |   [here](https://github.com/bikempastine/CMEECourseWork/tree/main/week2) |

### Contact
Bikem Pastine: bp222@ic.ac.uk

Director for the CMEE is course: [mhasoba](https://github.com/mhasoba/TheMulQuaBio)
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, sandbox, data, results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Week 2: Python 1

### Description
This week focused on the basics of Python, including variables, data structures, loops, functions, control flow tools, debugging, list comprehensions, building modules, and more.

### Instructions
Run the code within the 'code' folder. The code may prompt for inputs. Appropriate example inputs can be found in the 'data' folder. The outupts of the code can be found in the 'results' folder once the code is run. 

### Contents
| Submission  |      Learning Objectives      |  Link |
|----------|:-------------:|------:|
| align_seqs.py |  Tests two DNA sequences of different lengths for alignment | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| basic_csv.py |  Writes a file with the species and body mass data from the file testcsv.csv | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| basic_io1.py | Reads test.txt and returns the content, as well as removing the backspaces| [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| basic_io2.py |  Writes a .txt file with the numbers 0 to 99, each on a new line | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| basic_io3.py | Demonstrates the use of pickle to open files | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| boilerplate.py | Boilerplate python script | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| cfexcersises1.py | Module with mathematical opperation functions using conditionals | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| cfexcersises2.py |  Prints 'hello' a number of times to ilustrate elseif statements | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| control_flow.py | Module with functions tesing if inputs belong to different number types | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| debugme.py |  Demonstrates how to find bugs and improve error messages | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| dictionary.py | Populates a dictionary using a loop and list comprehensions | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| lc1.py | Creates lists of attributes from a list using loops and comprehensions | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| lc2.py | Creates lists with subsets of rainfall data using loops and list comprehensions | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| loops.py | Examples of for loops | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| MyExampleScript.py | First python script | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| oaks.py | Finds oaks from a list of species using list comprehensions and loops | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| oaks_debugme.py |  Checks for oaks by genus name from a .csv file | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| scope.py | Understanding variable scope in functions | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| sysargv.py |  Illustrates sys.argv in python scripts | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| test_control_flow.py | Illustrates doctests and control flows | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| tuple.py | Prints tuples values in seperate blocks of text with labels | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
| using_name.py | Illustrates __name__ and __main__ in python scripts | [here](https://github.com/bikempastine/CMEECourseWork/blob/main/week2/code/) |
### Contact
Bikem Pastine: bp222@ic.ac.uk

Director for the CMEE is course: [mhasoba](https://github.com/mhasoba/TheMulQuaBio)
**********************************************************************

Found following files in results directory: align_seqs_out.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 99.5

Found 22 code files: MyExampleScript.py, sysargv.py, tuple.py, basic_io3.py, oaks.py, lc1.py, cfexcersises1.py, control_flow.py, dictionary.py, using_name.py, boilerplate.py, lc2.py, debugme.py, test_control_flow.py, align_seqs.py, cfexcersises2.py, basic_csv.py, basic_io2.py, scope.py, basic_io1.py, loops.py, oaks_debugme.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file MyExampleScript.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Author: Bikem bp222@ic.ac.uk
# Script: Learning to run python script
# Arguments: 0
# Date: Oct 2022

def foo(x):
    x *= x
    print(x)

foo(2)
**********************************************************************

Testing MyExampleScript.py...

MyExampleScript.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 97.0

Output (only first 500 characters): 


**********************************************************************
4

**********************************************************************

Code ran without errors

Time consumed = 0.03764s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments ", len(sys.argv))
print("The arguments are: ", str(sys.argv))
**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 95.0

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.03856s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by
# species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
# ... etc.

for i in birds:
    print('Latin name: ', i[0], '; Common name: ', i[1], '; Mass:', i[2])


**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 93.0

Output (only first 500 characters): 


**********************************************************************
Latin name:  Passerculus sandwichensis ; Common name:  Savannah sparrow ; Mass: 18.7
Latin name:  Delichon urbica ; Common name:  House martin ; Mass: 19
Latin name:  Junco phaeonotus ; Common name:  Yellow-eyed junco ; Mass: 19.5
Latin name:  Junco hyemalis ; Common name:  Dark-eyed junco ; Mass: 19.6
Latin name:  Tachycineata bicolor ; Common name:  Tree swallow ; Mass: 20.2

**********************************************************************

Code ran without errors

Time consumed = 0.03963s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#############################
# STORING OBJECTS
#############################

my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb')
pickle.dump(my_dictionary, f)
f.close()

f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)
**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 91.0

Output (only first 500 characters): 


**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.04922s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Author: Bikem bp222@ic.ac.uk
# Script: oaks.py
# Arguments: 0
# Date: Oct 2022

taxa = ['Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',]

#finds just the oak trees from a list of species

def is_an_oak(name):
    return name.lower().startswith('quercus')

##Using for Loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)




**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 88.5

Output (only first 500 characters): 


**********************************************************************
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}

**********************************************************************

Code ran without errors

Time consumed = 0.03687s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

latin_names_comp = [i[0] for i in birds]
print(latin_names_comp)

common_names_comp = [i[1] for i in birds]
print(common_names_comp)

mean_body_comp = [i[2] for i in birds]
print(mean_body_comp)

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

latin_names_loop = []
for i in birds: 
    # add the first element of each bird type list to latin_names_loop 
    latin_names_loop.append(i[0])

print(latin_names_loop)


common_names_loop = []
for i in birds: 
    common_names_loop.append(i[1])

print(common_names_loop)


mean_body_loop = []
for i in birds: 
    mean_body_loop.append(i[2])

print(mean_body_loop)


 
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 86.5

Output (only first 500 characters): 


**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.04317s

======================================================================
Inspecting script file cfexcersises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

## docstrings ##
"""This program combines functions and the 'if' conditional in python to demonstrate their usage."""

__appname__ = 'cfexcersises1.py'
__author__ = 'Bikem Pastine (bp222@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "No license needed"

## imports ##
import sys
#module is made to interface with the operating system

def foo_1(x):
    """Returns the square root of x"""
    return x ** 0.5

def foo_2(x,y):
    """Returns the larger number between two imput values"""
    if x>y:
        return x
    return y

def foo_3(x,y,z):
    """Returns the three inputs with the largest value on the right, and the two smaller numbers to the left in any order """
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return[x, y, z]

def foo_4(x):
    """Returns the factorial of x, caluculated using a 'for' loop"""
    result = 1
    for i in range(1, x+1):
        result = result * i
    return result

def foo_5(x):
    """Returns the factorial of x, calculated using a recursive function"""
    if x == 1:
        return 1
    return x * foo_5(x-1)

def foo_6(x):
    """Returns the factorial of x, calculated using a 'while' loop."""
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

def main(argv):
    """Main entry point of the program """
    print(foo_1(9))
    print(foo_2(10,6))
    print(foo_3(3,2,1))
    print(foo_4(6))
    print(foo_5(5))
    print(foo_6(4))
    return 0

if __name__ == "__main__":
    """Makes sure the 'main' function is called from command line"""
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing cfexcersises1.py...

cfexcersises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 86.5

Output (only first 500 characters): 


**********************************************************************
3.0
10
[2, 1, 3]
720
120
24

**********************************************************************

Code ran without errors

Time consumed = 0.03968s

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

## docstrings ##
"""This program demonstrats the use of control flow statements."""

__appname__ = '[control_flow.py]'
__author__ = 'Bikem Pastine (bp222@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "No license needed"

## imports ##
import sys 
#module is made to interface with the operating system

## constants ##

## functions ##
def even_or_odd(x=0):
    """Find whether a number 'x' is even or odd"""
    if x % 2 ==0:
        return f"{x} is even"
    return f"{x} is odd"

def largest_divisor_five(x=120):
    """Find the largest divisor of x among 2,3,4, and 5"""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0:
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else:
        return f"No divisor found for {x}"
    return f"The largest divisor of {x} is {largest}"

def is_prime(x=70):
    """Find whether an integer is prime"""
    for i in range(2, x):
        if x % i == 0:
            print(f"{x} is not a prime: {i} is a divisor")
            return False
    print(f"{x} is a prime!")
    return True

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print(f"There are {len(allprimes)} primes between 2 and {x}")
    return allprimes



def main(argv):
    """Main entry point of the program """
    print(even_or_odd(22))
    print(largest_divisor_five(120))
    print(is_prime(13))
    print(is_prime(40))
    print(find_all_primes(30))
    return 0

if __name__ == "__main__":
    """Makes sure the 'main' function is called from command line"""
    status = main(sys.argv)
    sys.exit(status)



**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 86.5

Output (only first 500 characters): 


**********************************************************************
22 is even
The largest divisor of 120 is 5
13 is a prime!
True
40 is not a prime: 2 is a divisor
False
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is not a prime: 2 is a divisor
17 is a pr
**********************************************************************

Code ran without errors

Time consumed = 0.05168s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a python script to populate a dictionary called taxa_dic derived from
# taxa so that it maps order names to sets of taxa and prints it to screen.
#

#### Loop #### 

taxa_set = set() #make an empty set
for i in taxa: #for each tuple in taxa
        taxa_set.add(i[1]) #add the second member of the tuple to the set

taxa_dic = {} #make an empty dictionary

for x in taxa_set: #for each member of the taxa_set
    taxa_dic[x] = set() #populate the dictionary with keys of each member of taxa_set corresponding to an empty set 
    for i in taxa: #for each member of taxa
        if i[1] == x: #if the second element of each tuple in taxa is the same as the current member of taxa_set in the loop
            taxa_dic[x].add(i[0]) # add the species as the variable 

print(taxa_dic)

# Now write a list comprehension that does the same (including the printing after the dictionary has been created)  
 
#### List Comprehension #### 

taxa_dic_comp = {x[1]:set([y[0] for y in taxa if x[1] == y[1]]) for x in taxa} 
print(taxa_dic_comp)



**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 84.5

Output (only first 500 characters): 


**********************************************************************
{'Afrosoricida': {'Microgale talazaci', 'Microgale dobsoni'}, 'Chiroptera': {'Myotis lucifugus'}, 'Carnivora': {'Canis lupus', 'Lyacon pictus', 'Arctocephalus gazella'}, 'Rodentia': {'Peromyscus crinitus', 'Cleithrionomys rutilus', 'Mus domesticus', 'Gerbillus henleyi'}}
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Peromyscus crinitus', 'Cleithrionomys rutilus', 'Mus domesticus', 'Gerbillus henleyi'}, 'Afrosoricida': {'Microgale talazaci', 'Microgale dobsoni'}, 'Carnivora': {'Canis lupus', 
**********************************************************************

Code ran without errors

Time consumed = 0.05257s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env pyhton3
#Filename: using_name.py

if __name__ == '__main__' :
    print('this program is being run by itself')
else:
    print('I am being imported from another module')

print("This module's name is: " + __name__)

**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 82.5

Output (only first 500 characters): 


**********************************************************************
this program is being run by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.05258s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

## docstrings ##
"""This program demonstrats the basics of writing programs in phython."""

__appname__ = '[boilerplate.py]'
__author__ = 'Bikem Pastine (bp222@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "No license needed"

## imports ##
import sys 

#module is made to interface with the operating system

## constants ##

## functions ##
def main(argv):
    """Main entry point of the program """
    print('This is a boilerplate')
    return 0

if __name__ == "__main__":
    """Makes sure the 'main' function is called from command line"""
    status = main(sys.argv)
    sys.exit(status)



**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 82.5

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.03957s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.

high_rainfall_comp = [i for i in rainfall if i[1] > 100]
print(high_rainfall_comp)

# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

low_rainfall_comp = [i for i in rainfall if i[1] < 50]
print(low_rainfall_comp)

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

#Loop for list of months with rainfall greater than 100mm
high_rainfall_loop = []
for i in rainfall:
    if i[1] > 100 :
        high_rainfall_loop.append(i)

print(high_rainfall_loop)

#Loop for list of months with rainfall less than 50mm
low_rainfall_loop = []
for i in rainfall:
    if i[1] < 50 :
        low_rainfall_loop.append(i)

print(low_rainfall_loop)



**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 80.5

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
[('MAR', 49.9), ('SEP', 27.0)]
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
[('MAR', 49.9), ('SEP', 27.0)]

**********************************************************************

Code ran without errors

Time consumed = 0.04047s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
#Debugging

def buggyfunc(x):
    y = x 
    for i in range(x):
        try:
            y = y-1
            z = x/y
        except ZeroDivisionError:
            print(f"The results of dividing a number by zero is undefined")
        except:
            print(f"This didn't work; {x = }; {y = }")
        else:
            print(f"OK; {x = }; {y = }; {z = };")
    return(z)

buggyfunc(20)

**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 78.0

Output (only first 500 characters): 


**********************************************************************
OK; x = 20; y = 19; z = 1.0526315789473684;
OK; x = 20; y = 18; z = 1.1111111111111112;
OK; x = 20; y = 17; z = 1.1764705882352942;
OK; x = 20; y = 16; z = 1.25;
OK; x = 20; y = 15; z = 1.3333333333333333;
OK; x = 20; y = 14; z = 1.4285714285714286;
OK; x = 20; y = 13; z = 1.5384615384615385;
OK; x = 20; y = 12; z = 1.6666666666666667;
OK; x = 20; y = 11; z = 1.8181818181818181;
OK; x = 20; y = 10; z = 2.0;
OK; x = 20; y = 9; z = 2.2222222222222223;
OK; x = 20; y = 8; z = 2.5;
OK; x = 20; y = 7; 
**********************************************************************

Code ran without errors

Time consumed = 0.03874s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

## docstrings ##
"""This program demonstrats the use of control flow statements and doctests."""

__appname__ = '[test_control_flow.py]'
__author__ = 'Bikem Pastine (bp222@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "No license needed"

## imports ##
import doctest
import sys 

#module is made to interface with the operating system

## constants ##

## functions ##
def even_or_odd(x=0):
    """Find whether a number 'x' is even or odd
    >>> even_or_odd(10)
    '10 is even'
    
    >>> even_or_odd(5)
    '5 is odd'
    

    ###recieving an error due to modular behaviour
    # >>> even_or_odd(6.5)
    # '6.5 is even'
    
    >>> even_or_odd(-2)
    '-2 is even'
    """

    #define function to test
    if x % 2 ==0:
        return f"{x} is even"
    return f"{x} is odd"


# def main(argv):
#     """Main entry point of the program """
#     print(even_or_odd(22))
#     print(even_or_odd(33))
#     return 0

# if __name__ == "__main__":
#     """Makes sure the 'main' function is called from command line"""
#     status = main(sys.argv)

doctest.testmod()



**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 78.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.08598s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script tests two DNA sequences of different lengths for alignment. It returns the alignment with the highest similarity between the strings as a .txt file."""

__appname__ = 'align_seqs.py'
__author__ = 'Bikem Pastine (bp222@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "No license needed"


#importing
import csv
import sys


# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    """This function computes a score by returning the number of matches from a startpoint chosen by the user. 
    The imputs are two strings (s1,s2), the lenghts of the strings (l1, l2), and the startpoint. """
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                #import ipdb; ipdb.set_trace()
                #print('i is', i)
                #print(matched)
                score = score + 1
                #print('score is:', score)
            else:
                matched = matched + "-"
                # print('i is', i)
                # print(matched)
                # print('score is:', score)

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")
    
    return score


def main(argv):
    """Takes the default imput .csv (align_seqs_DNA.csv) and outputs the alignement of the two strings with the highest number of matches as a .txt file."""
    # open the csv and extract the contents (DNA strings)
    with open('../data/align_seqs_DNA.csv', 'r') as f:
        csvread = csv.reader(f)
        for line in csvread:
            DNA = line
    
    # Two example sequences to match
    seq1 = str(DNA[0])
    seq2 = str(DNA[1])
    print("The two sequences to match are:", seq1, "and", seq2)

    # Get the length of the sequences
    l1 = len(seq1)
    l2 = len(seq2)

    # Assign the longer sequence s1, and the shorter to s2
    # l1 is length of the longest, l2 that of the shortest
    if l1 >= l2:
        s1 = seq1
        s2 = seq2
    else:
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swap the two lengths

    # Find the best match (highest score) for the two sequences
    my_best_align = None
    my_best_score = -1

    for i in range(l1): # Note that you just take the last alignment with the highest score
        z = calculate_score(s1, s2, l1, l2, i)
        if z > my_best_score:
            my_best_align = "." * i + s2 # think about what this is doing!
            my_best_score = z 
    print(my_best_align)
    print(s1)
    print("Best score:", my_best_score)

    # Output the results as a text file in the results folder
    with open('../results/align_seqs_out.txt', 'w') as f:
        f.write(my_best_align + '\n' + s1 + '\n' + "Best score: " + str(my_best_score))
    
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 78.0

Output (only first 500 characters): 


**********************************************************************
The two sequences to match are: ATCGCCGGATTACGGG and CAATTCGGAT
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTCGGAT
ATCGCCGGATTACGGG
5
 
........------**
........CAATTCGGAT
AT
**********************************************************************

Code ran without errors

Time consumed = 0.04463s

======================================================================
Inspecting script file cfexcersises2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Author: Bikem bp222@ic.ac.uk
# Script: cfexcercises2.py
# Arguments: 0
# Date: Oct 2022

##########################
def hello_1(x):
    for j in range(x):
        if j % 3 ==0:
            print('hello')
    print(' ')

hello_1(12)

#########################
def hello_2(x):
    for j in range(x):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print('')

hello_2(12)

##########################
def hello_3(x, y):
    for i in range(x,y):
        print('hello')
    print('')

hello_3(3,17)

#########################
def hello_5(x):
    while x < 100:
        if x == 31:
            for k in range(7):
                print('hello')
        elif x == 18:
            print('hello')
        x = x + 1
    print(' ')

hello_5(12)

#WHILE loop with BREAK
def hello_6(x,y):
    while x: #while x is true
        print('hello' + str(y))
        y += 1
        if y == 6:
            break
    print(' ')

hello_6(True, 0)
**********************************************************************

Testing cfexcersises2.py...

cfexcersises2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 73.5

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello
 
hello
hello
hello
hello

hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

hello
hello
hello
hello
hello
hello
hello
hello
 
hello0
hello1
hello2
hello3
hello4
hello5
 

**********************************************************************

Code ran without errors

Time consumed = 0.04287s

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
import csv

with open('../data/testcsv.csv', 'r') as f:
#read file
    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])


#write file: species name and body mass columns
with open('../data/testcsv.csv','r') as f:
    with open('../data/bodymass.csv', 'w') as g:
        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])


**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 71.5

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.04698s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
#############################
# FILE OUTPUT
#############################

list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n')

f.close()
**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 69.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.04342s

======================================================================
Inspecting script file scope.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Author: Bikem bp222@ic.ac.uk
# Script: variable scope
# Arguments: 0
# Date: Oct 2022

i = 1
x = 0
for i in range(10):
    x += 1
print(i)
print(x)

#########################

i =1
x =0
def a_function(y):
    x = 0
    for i in range(y):
        x += 1
    return x
a_function(10)
print(i)
print(x)

#########################
i = 1
x = 0
def a_function(y):
    x = 0
    for i in range(y):
        x += 1
    return x

print (a_function(10))

###########################
##### Global Variables ####
###########################

_a_global = 10
if _a_global >= 5:
    _b_global = _a_global + 5

print("Before calling a_function, outside the function, the value of _a_global is", _a_global)
print("Before calling a_function, outside the function, the value of _b_global is", _b_global)

def a_function():
    _a_global = 4

    if _a_global >= 4:
        _b_global = _a_global + 5

    _a_local = 3

    print("Inside the function, the value of _a_global is", _a_global)
    print("Inside the function, the value of _b_global is", _b_global)
    print("Inside the function, the value of _a_local is", _a_local)

a_function()

print("After calling the function, outside the function, the value of _a_ global is", _a_global)
print("After calling the function, outside the function, the value of _b_ global is", _b_global)
##error because _a_local does not exist ouside the function
# print("After calling the function, outside the function, the value of _a_ local is", _a_local)

###################################
_a_global = 10

def a_function():
    _a_local = 4
    print("Inside the function, the value _a_local is", _a_local)
    print("Inside the function, the value of _a_global is", _a_global) 

a_function()

print("Outside the function, the value of _a_global is", _a_global)

###################################
_a_global = 10

print("Before calling a_function, outside the function, the value of _a_global is", _a_global)

def a_function():
    global _a_global
    _a_global = 5
    _a_local = 4

    print("Inside the function, the value of _a_global is", _a_global)
    print("Inside the function, the value _a_local is", _a_local)

a_function()

print("After calling a_function, outside the function, the value of _a_global is", _a_global)
    
def a_function():
    _a_global = 10

    def _a_function2():
        global _a_global
        _a_global =2
    
    print("Before calling a_function2, value of _a_global is", _a_global)
    
    _a_function2()

    print("After calling a_function2, value of _a_global is", _a_global)
     
a_function()

print("The value of a_global in main workspace / namespace now is", _a_global)

#############################

_a_global = 10

def a_function():

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function2, value of _a_global is", _a_global)

    _a_function2()

    print("After calling a_function2, value of _a_global is", _a_global)

a_function()

print("The value of a_global in main workspace / namespace is", _a_global)

**********************************************************************

Testing scope.py...

scope.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 63.0

Output (only first 500 characters): 


**********************************************************************
9
10
1
0
10
Before calling a_function, outside the function, the value of _a_global is 10
Before calling a_function, outside the function, the value of _b_global is 15
Inside the function, the value of _a_global is 4
Inside the function, the value of _b_global is 9
Inside the function, the value of _a_local is 3
After calling the function, outside the function, the value of _a_ global is 10
After calling the function, outside the function, the value of _b_ global is 15
Inside the function, the va
**********************************************************************

Code ran without errors

Time consumed = 0.04011s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
###################
## FILE INPUT
###################

#open file to read
f = open('../sandbox/test.txt', 'r')

for line in f:
    print(line)

f.close()

###skip blank lines
f = open('../sandbox/test.txt', 'r')

for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()
**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 61.0

Output (only first 500 characters): 


**********************************************************************
First Line

Second Line



Third Line



Fourth Line
First Line

Second Line

Third Line

Fourth Line

**********************************************************************

Code ran without errors

Time consumed = 0.04189s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Author: Bikem bp222@ic.ac.uk
# Script: Some examples of loops in python
# Arguments: 0
# Date: Oct 2022

#For loops

for i in range(5):
    print(i)

my_list = [0,2,"geronimo!",3.0,True,False]
for k in my_list:
    print(k)


total = 0
summands = [0, 1, 11, 111, 1111]

for s in summands:
    total = total + s
    print(total)


# While loop
z = 0
while z < 100:
    z = z + 1
    print(z)



**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 59.0

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********************************************************************

Code ran without errors

Time consumed = 0.04073s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script checks for oaks in a csv file 'TestOaksData.csv'."""

__appname__ = 'oaks_debugme.py'
__author__ = 'Bikem Pastine (bp222@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "No license needed"


#imports
import csv
import sys
import doctest

#Define function
def is_an_oak(name):
    """ Returns True if name is starts with 'quercus' 

    >>> is_an_oak('Fagus sylvatica')
    False

    >>> is_an_oak('Quercus petraea')
    True

    >>> is_an_oak('QUERCUS PETRAEA')
    True

    >>> is_an_oak('QuercusPetraea')
    False

    >>> is_an_oak('Quercuss Petraea')
    False

    >>> is_an_oak('qiercus petraea')
    False

    >>> is_an_oak('Quercus-abcd')
    False

    """
    
    return name.lower().startswith('quercus ') #include the space between genus and species to only accept quercus

def main(argv): 
    f = open('../data/TestOaksData.csv','r')
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0] + ' '): #modify the input for the function to include a space sudo-sepperating the genus and species names
            #breakpoint()
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()
**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 58.5

Output (only first 500 characters): 


**********************************************************************
['Genus', ' species']
The genus is: 
Genus

['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.08806s

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 58.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!